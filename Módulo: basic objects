"""
Instituto Tecnológico de Costa Rica (ITCR)
Escuela de Ingeniería en Computadores

II Semestre 2017 - Taller de Programación
Prof. Jeff Schmidt Peralta
III Proyecto - Scamperghost
Módulo: basic objects

Lenguaje de Programación: Python 3
"""

### Libraries ###
import random, time, os
from threading import Thread

### Needed Values ###
g_colors = ["pink", "red", "orange", "cyan"]   # Colores para los fantasmas

### Field ###
" Se define la clase Position, que es un objeto con coordenadas especificas dentro de la matriz y contiene un objeto chrct (personaje) y otro item(moneda, píldora, comida)"
class Position:
    def __init__(self, vec_x, vec_y, chrct, item):
        self.vec_x = vec_x   # Posición en el eje x
        self.vec_y = vec_y   # Posición en el eje y
        self.chrct = chrct   # Personaje ubicado en la posición, puede ser tipo PacMan, Ghost o None para indicar que no hay un personaje en la posición
        self.item = item   # Objeto consumible dentro de la posición, debe ser tipo Item

" Se define la clase Match"
class Match:
    def __init__(self, level):
        self.level = level   # Nivel
        self.chart = []   # Matriz de 32x30, inicialmente vacía
        self.score = 0   # Puntaje

        # Se llena la matriz con objetos Position hasta quedar de 32x30
        i = 0
        while len(self.chart) != 30:
            line = []
            j = 0
            while len(line) != 32:
                line.append(Position(i, j, None, None))
                j += 1
            self.chart.append(line)
            i += 1

        # Se crea a PacMan
        pacman = PacMan(random.randint(0, 31), random.randint(0, 29))
        self.__put_obj__(pacman)

        # Se crean los Ghost
        ghost = []
        while len(ghost) < self.level*4:
            ghost.append(Ghost(alive, random.randint(0, 31), random.randint(0, 29), g_colors[len(ghost)%4]))
        for g in ghost:
            self.__put_obj__(g)

        # Se crean los objetos consumibles
        items = []
        while len(items)//3 < self.level*4:
            items.append(Item("coin", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("coin", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("pill", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("food", random.randint(0, 31), random.randint(0, 29)))
        for i in items:
            self.__put_obj__(i)

    # Función para colocar un objeto tipo Item, PacMan o Ghost dentro de la matriz en la posición que posee el objeto como atributos
    def __put_obj__(self, new_obj):
        if isinstance(new_obj, (PacMan, Ghost)):
            if self.chart[new_obj.pos_y][new_obj.pos_x].chrct == None:
                self.chart[new_obj.pos_y][new_obj.pos_x].chrct = new_obj
            if self.chart[new_obj.pos_y][new_obj.pos_x].chrct != None:
                self.__collision__(self.chart[new_obj.pos_y][new_obj.pos_x].chrct, self.chart[new_obj.pos_y][new_obj.pos_x].item, new_obj)
        if isinstance(new_obj, Item):
            self.chart[new_obj.pos_y][new_obj.pos_x].item = new_obj

    # Función para remover un objeto tipo Item, PacMan o Ghost de la matriz
    def __erase_obj__(self, old_obj):
        if isinstance(old_obj, (PacMan, Ghost)):
            self.chart[old_obj.pos_y][old_obj.pos_x].chrct = None
        if isinstance(old_obj, Item):
            self.chart[old_obj.pos_y][old_obj.pos_x].item = None

    # Función que simula como PanMan se 'come' los items
    def __eat_item__(self, pos):
        pacman = self.chart[pos[1]][pos[0]].chrct
        item = self.chart[pos[1]][pos[0]].item
        if isinstance(pacman, PacMan) and isinstance(item, Item):
            if item.kind == "coin":
                self.score += 15
            if item.kind == "pill":
                pacman.__buff__()
            if item.kind == "food":
                self.score += 100
            self.__erase_obj__(item)

### Characters ###
" Se define la clase PacMan que crea al personaje controlado por el jugador"
class PacMan:
    def __init__(self, pos_x, pos_y):
        self.pos_x = pos_x   # Posición en x del personaje
        self.pos_y = pos_y   # Posición en y del personaje
        self.lifes = 3   # Vidas restantes del personaje
        self.buff = False   # Booleano para indicar si el poder esta activado

    # Función para mover al personaje (este solo cambia sus coordenadas, el cambio debe realizarse con la función Match.__put_obj__(self); el objeto PacMan es el que entra como parámetro de la función)
    def __move__(direction):
        if direction == "left":
            if self.pos_x > 0:
                self.pos_x -= 1
            if self.pos_x == 0:
                self.pos_x = 31
        if direction == "right":
            if self.pos_x < 31:
                self.pos_x += 1
            if self.pos_x == 31:
                self.pos_x = 0
        if direction == "up":
            if self.pos_y > 0:
                self.pos_y -= 1
            if self.pos_y == 0:
                self.pos_y = 29
        if direction == "down":
            if self.pos_y < 29:
                self.pos_y += 1
            if self.pos_y == 29:
                self.pos_y = 0

" Se define la clase Ghost que crea los personajes enemigos controlados por el programa con movimientos seudo-aleatorios"
class Ghost:
    def __init__(self, state, pos_x, pos_y, color):
        self.state = state   # Estado del fantasma ("alive", "dead")
        self.pos_x = pos_x   # Posición en x
        self.pos_y = pos_y   # Posición en y
        self.color = color   # Color del fantasma

    # Función para mover al fantasma (se mueve tres veces en la dirección que reciba)
    def __move__(direction):
        counter = 0
        while counter < 3:
            if direction == "left":
                if self.pos_x > 0:
                    self.pos_x -= 1
                if self.pos_x == 0:
                    self.pos_x = 31
            if direction == "right":
                if self.pos_x < 31:
                    self.pos_x += 1
                if self.pos_x == 31:
                    self.pos_x = 0
            if direction == "up":
                if self.pos_y > 0:
                    self.pos_y -= 1
                if self.pos_y == 0:
                    self.pos_y = 29
            if direction == "down":
                if self.pos_y < 29:
                    self.pos_y += 1
                if self.pos_y == 29:
                    self.pos_y = 0
            counter += 1

### Items ###
" Se crea la clase Item que define los objetos consumibles del juego"
class Item:
    def __init__(self, kind, pos_x, pos_y):
        self.kind == kind   # Define la clase de item que se crea ("coin", "pill", "food")
        self.pos_x = pos_x   # Posición x dentro de la matriz
        self.pos_y = pos_y   # Posición y dentro de la matriz

### Highscores ###
" Función usada para obtener los puntajes mas altos que se han obtenido"
def Get_HS():
    file_path = os.path.join("docs", "_highscores_.txt")
    file = open(file_path, "r")
    file.close()
