"""
Instituto Tecnológico de Costa Rica (ITCR)
Escuela de Ingeniería en Computadores

II Semestre 2017 - Taller de Programación
Prof. Jeff Schmidt Peralta
III Proyecto - Scamperghost
Módulo: basic objects

Lenguaje de Programación: Python 3
"""

### Libraries ###
import random

### Basic Values ###
g_colors = ["pink", "red", "orange", "cyan"]

### Match ###
class Position:
    def __init__(self, vec_x, vec_y, chrct, item):
        self.vec_x = vec_x
        self.vec_y = vec_y
        self.chrct = chrct
        self.item = item

class Match:
    def __init__(self, level):
        self.level = level
        self.chart = []
        i = 0
        while len(self.chart) != 30:
            line = []
            j = 0
            while len(line) != 32:
                line.append(Position(i, j, None, None))
                j += 1
            self.chart.append(line)
            i += 1

        pacman = PacMan(random.randint(0, 31), random.randint(0, 29))
        self.__put_obj__(pacman)

        ghost = []
        while len(ghost) < self.level*4:
            ghost.append(Ghost(alive, random.randint(0, 31), random.randint(0, 29), g_colors[len(ghost)%4]))
        for g in ghost:
            self.__put_obj__(g)

        items = []
        while len(items)//3 < self.level*4:
            items.append(Item("coin", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("coin", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("pill", random.randint(0, 31), random.randint(0, 29)))
            items.append(Item("food", random.randint(0, 31), random.randint(0, 29)))
        for i in items:
            self.__put_obj__(i)

    def __put_obj__(self, new_obj):
        if isinstance(new_obj, (PacMan, Ghost)):
            if self.chart[new_obj.pos_y][new_obj.pos_x].chrct == None:
                self.chart[new_obj.pos_y][new_obj.pos_x].chrct = new_obj
            if self.chart[new_obj.pos_y][new_obj.pos_x].chrct != None:
                self.__collision__(self.chart[new_obj.pos_y][new_obj.pos_x].chrct, self.chart[new_obj.pos_y][new_obj.pos_x].item, new_obj)
        if isinstance(new_obj, Item):
            self.chart[new_obj.pos_y][new_obj.pos_x].item = new_obj

    def __erase_obj__(self, old_obj):
        if isinstance(old_obj, (PacMan, Ghost)):
            self.chart[old_obj.pos_y][old_obj.pos_x].chrct = None
        if isinstance(old_obj, Item):
            self.chart[old_obj.pos_y][old_obj.pos_x].item = None

    def __eat_item__(self, pos):
        pacman = self.chart[pos[1]][pos[0]].chrct
        item = self.chart[pos[1]][pos[0]].item
        if isinstance(pacman, PacMan) and isinstance(item, Item):
            

### Characters ###

class PacMan:
    def __init__(self, pos_x, pos_y):
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.lifes = 3
        self.buff = False

    def __move__(direction):
        if direction == "left":
            if self.pos_x > 0:
                self.pos_x -= 1
            if self.pos_x == 0:
                self.pos_x = 31
        if direction == "right":
            if self.pos_x < 31:
                self.pos_x += 1
            if self.pos_x == 31:
                self.pos_x = 0
        if direction == "up":
            if self.pos_y > 0:
                self.pos_y -= 1
            if self.pos_y == 0:
                self.pos_y = 29
        if direction == "down":
            if self.pos_y < 29:
                self.pos_y += 1
            if self.pos_y == 29:
                self.pos_y = 0

class Ghost:
    def __init__(self, state, pos_x, pos_y, color):
        self.state = state
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.color = color

    def __move__(direction):
        if direction == "left":
            if self.pos_x > 0:
                self.pos_x -= 1
            if self.pos_x == 0:
                self.pos_x = 31
        if direction == "right":
            if self.pos_x < 31:
                self.pos_x += 1
            if self.pos_x == 31:
                self.pos_x = 0
        if direction == "up":
            if self.pos_y > 0:
                self.pos_y -= 1
            if self.pos_y == 0:
                self.pos_y = 29
        if direction == "down":
            if self.pos_y < 29:
                self.pos_y += 1
            if self.pos_y == 29:
                self.pos_y = 0

### Items ###

class Item:
    def __init__(self, kind, pos_x, pos_y):
        self.kind == kind     # Define la clase de item que se crea ("coin", "pill", "food")
        self.pos_x = pos_x    # Posición x dentro de la matriz
        self.pos_y = pos_y    # Posición y dentro de la matriz
